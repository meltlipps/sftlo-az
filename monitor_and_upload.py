import os
import time
from dotenv import load_dotenv
import paramiko
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import logging
from logging.handlers import TimedRotatingFileHandler
from azure.storage.blob import BlobServiceClient
from cryptography.fernet import Fernet
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
from threading import Thread
import json

# ======== ‡πÇ‡∏´‡∏•‡∏î ENV =========
'''load_dotenv(dotenv_path="config.env")
SFTP_HOST = os.getenv("SFTP_HOST")
SFTP_PORT = int(os.getenv("SFTP_PORT", 22))
SFTP_USER = os.getenv("SFTP_USER")
SFTP_PASS = os.getenv("SFTP_PASS")'''
#REMOTE_DIR = "./COOP"
WATCH_FOLDER = "C:/Users/Boat_/Downloads/watch_folder"
'''AZURE_CONNECTION_STRING = os.getenv("AZURE_CONNECTION_STRING")
AZURE_CONTAINER_NAME = os.getenv("AZURE_CONTAINER_NAME")
assert AZURE_CONNECTION_STRING is not None, "‚ùå Missing AZURE_CONNECTION_STRING"
assert AZURE_CONTAINER_NAME is not None, "‚ùå Missing AZURE_CONTAINER_NAME"'''

# ======== Logger =========
def setup_logger(log_dir="logs"):
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    log_file = os.path.join(log_dir, "upload.log")
    logger = logging.getLogger("UploadLogger")
    logger.setLevel(logging.DEBUG)
    handler = TimedRotatingFileHandler(
        log_file, when="midnight", interval=1, backupCount=7, encoding='utf-8'
    )
    handler.suffix = "%Y-%m-%d"
    formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
    handler.setFormatter(formatter)
    if not logger.handlers:
        logger.addHandler(handler)
    return logger

logger = setup_logger()

# ======== Key management =========
def generate_key(save_to="secret.key"):
    key = Fernet.generate_key()
    with open(save_to, "wb") as f:
        f.write(key)

def load_key(key_path="secret.key"):
    if not os.path.exists(key_path):
        generate_key(key_path)
    return open(key_path, "rb").read()

# ======== Encrypt file =========
def encrypt_file(filepath, key):
    fernet = Fernet(key)
    with open(filepath, "rb") as f:
        data = f.read()
    encrypted = fernet.encrypt(data)
    encrypted_path = filepath + ".enc"
    with open(encrypted_path, "wb") as f:
        f.write(encrypted)
    logger.info(f"üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(filepath)} ‚Üí {os.path.basename(encrypted_path)}")
    return encrypted_path

# ======== ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° =========
def wait_for_file_ready(filepath, timeout=15):
    prev_size = -1
    stable_count = 0
    start = time.time()
    while time.time() - start < timeout:
        try:
            size = os.path.getsize(filepath)
            if size == prev_size:
                stable_count += 1
                if stable_count >= 4:
                    return True
            else:
                stable_count = 0
            prev_size = size
        except FileNotFoundError:
            pass
        time.sleep(0.5)
    return False

# ======== Upload to Azure =========
def upload_to_blob(filepath):
    try:
        blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
        container_client = blob_service_client.get_container_client(AZURE_CONTAINER_NAME)
        try:
            container_client.create_container()
        except:
            pass
        filename = os.path.basename(filepath)
        with open(filepath, "rb") as data:
            container_client.upload_blob(name=filename, data=data, overwrite=True)
        logger.info(f"‚úÖ [Azure] ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
    except Exception as e:
        logger.error(f"‚ùå [Azure] ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {filepath} | {e}")

# ======== ‡∏£‡∏ß‡∏° log ‡πÅ‡∏•‡∏∞ upload =========
def log_upload(filepath):
    try:
        size_kb = os.path.getsize(filepath) / 1024
        logger.info(f"üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: {filepath} ({size_kb:.2f} KB)")
        upload_to_blob(filepath)
        logger.info(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: {filepath}")
    except Exception as e:
        logger.error(f"‚ùå log_upload ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

# ======== Watchdog Handler =========
class UploadHandler(FileSystemEventHandler):
    def __init__(self, host, port, username, password, remote_dir):
        super().__init__()
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.remote_dir = remote_dir
        
    def on_created(self, event):
        if not event.is_directory:
            filepath = os.path.abspath(event.src_path)
            filename = os.path.basename(filepath)
            logger.info(f"[EVENT] ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: {filename}")

            if filename.endswith(".enc"):
                logger.info(f"[SKIP] ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå .enc: {filename}")
                return

            if not wait_for_file_ready(filepath):
                logger.warning(f"[SKIP] ‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return

            # üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            key = load_key()
            encrypted_path = encrypt_file(filepath, key)
            encrypted_filename = os.path.basename(encrypted_path)

            try:
                transport = paramiko.Transport((self.host, self.port))
                transport.connect(username=self.username, password=self.password)
                sftp = paramiko.SFTPClient.from_transport(transport)

                remote_path = os.path.join(self.remote_dir, encrypted_filename).replace("\\", "/")

                if not os.path.exists(encrypted_path):
                    logger.error(f"[ERROR] ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {encrypted_path}")
                    return

                remote_path = os.path.join(self.remote_dir, encrypted_filename).replace("\\", "/")
                # ==================== Create path if not===================
                try:
                    sftp.mkdir(self.remote_dir)
                except IOError:
                    pass

                sftp.put(encrypted_path, remote_path)
                logger.info(f"‚úÖ [SFTP] ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {encrypted_filename}")

                sftp.close()
                transport.close()

                # üì§ Upload to Azure + log
                log_upload(encrypted_path)

            except Exception as e:
                logger.error(f"[ERROR] ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {encrypted_filename} | {e}")
                logger.debug(f"[DEBUG] path: {encrypted_path}")

# ======== Download files =========
def download_from_sftp(filename,remote_dir, host, port, username, password, save_to="downloads" ):
    try:
        if not os.path.exists(save_to):
            os.makedirs(save_to)

        transport = paramiko.Transport((host, port))
        transport.connect(username=username, password=password)
        sftp = paramiko.SFTPClient.from_transport(transport)
        
        remote_path = os.path.join(remote_dir, filename).replace("\\", "/")
        local_path = os.path.join(save_to, filename)

        sftp.get(remote_path, local_path)
        sftp.close()
        transport.close()

        logger.info(f"‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
        return local_path

    except Exception as e:
        logger.error(f"‚ùå ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {filename} | {e}")
        return None
 
# ======== Decrypt files =========
def decrypt_file(filepath, key):
    try:
        fernet = Fernet(key)
        with open(filepath, "rb") as enc_file:
            encrypted = enc_file.read()
        decrypted = fernet.decrypt(encrypted)

        output_path = filepath[:-4] if filepath.endswith(".enc") else filepath + ".dec"
        with open(output_path, "wb") as dec_file:
            dec_file.write(decrypted)

        logger.info(f"‚úÖ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß: {os.path.basename(filepath)} ‚Üí {os.path.basename(output_path)}")
        return output_path
    except Exception as e:
        logger.error(f"‚ùå ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return None

# ======== GUI Application =========
class FileTransferApp:
    def __init__(self, root):
        self.root = root
        self.sftp_profile_manager = SftpProfileManager()
        self.current_sftp_profile = None
        self.root.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
        self.root.geometry("1000x700")
        

        self.sftp_status_var = tk.StringVar()
        self.sftp_status_var.set("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP")
        self.status_var = tk.StringVar()  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
        self.status_var.set("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        self.tab_control = ttk.Notebook(root)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SFTP
        self._setup_sftp_menu()

        # ‡πÅ‡∏ó‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        self.tab_monitor = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab_monitor, text='‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå')
        
        # ‡πÅ‡∏ó‡πá‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        self.tab_download = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab_download, text='‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå')
        
        self.tab_control.pack(expand=1, fill="both")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á Log
        self.log_frame = ttk.LabelFrame(root, text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå")
        self.log_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(self.log_frame, height=10)
        self.log_text.pack(fill="both", expand=True, padx=5, pady=5)
        self.log_text.configure(state='disabled')
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ)
        self.create_control_buttons()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        self.btn_start = ttk.Button(
            self.control_frame,
            text="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
            command=self.start_monitoring,
            style='Start.TButton'
        )
        self.btn_start.pack(side="left", padx=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        self.btn_stop = ttk.Button(
            self.control_frame, 
            text="‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", 
            command=self.stop_monitoring, 
            state='disabled',
            style='Stop.TButton'
        )
        self.btn_stop.pack(side="left", padx=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        self.btn_clear_log = ttk.Button(
            self.control_frame, 
            text="‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", 
            command=self.clear_log
        )
        self.btn_clear_log.pack(side="right", padx=5)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏õ‡∏∏‡πà‡∏°
        self.setup_button_styles()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.setup_monitor_tab()
        self.setup_download_tab()
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        self.observer = None
        self.event_handler = None
        self.monitoring = False
        
        # Redirect logger to GUI
        self.setup_log_redirect()

    def _setup_sftp_menu(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SFTP"""
        menubar = tk.Menu(self.root)
        
        # ‡πÄ‡∏°‡∏ô‡∏π SFTP
        sftp_menu = tk.Menu(menubar, tearoff=0)
        sftp_menu.add_command(
            label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP", 
            command=self._select_sftp_profile
        )
        sftp_menu.add_separator()
        sftp_menu.add_command(
            label="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP", 
            command=self._manage_sftp_profiles
        )
        
        menubar.add_cascade(label="SFTP", menu=sftp_menu)
        self.root.config(menu=menubar)
    
    def _select_sftp_profile(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP"""
        SftpProfileWindow(
            self.root,
            self.sftp_profile_manager,
            self._on_sftp_profile_selected
        )
    
    def _manage_sftp_profiles(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP"""
        SftpProfileWindow(self.root, self.sftp_profile_manager)
    
    def _on_sftp_profile_selected(self, profile):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP ‡πÅ‡∏•‡πâ‡∏ß"""
        self.current_sftp_profile = profile
        messagebox.showinfo(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß",
            f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {profile['host']}\n"
            f"‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: {profile['remote_dir']}"
        )
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô GUI
        self._update_sftp_status()
    
    def _update_sftp_status(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP ‡πÉ‡∏ô GUI"""
        if self.current_sftp_profile:
            status_text = (
                f"‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {self.current_sftp_profile['host']} | "
                f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {self.current_sftp_profile['username']} | "
                f"‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {self.current_sftp_profile['remote_dir']}"
            )
            self.sftp_status_var.set(status_text)
        else:
            self.sftp_status_var.set("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP")
    
    def start_monitoring(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SFTP ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        if not self.current_sftp_profile:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP ‡∏Å‡πà‡∏≠‡∏ô")
            return
        
        watch_folder = self.watch_folder_var.get()
        if not os.path.isdir(watch_folder):
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà!")
            return
            
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ observer ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if hasattr(self, 'observer') and self.observer and self.observer.is_alive():
                messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                return
                
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á handler ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå SFTP ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            self.event_handler = UploadHandler(
                self.current_sftp_profile['host'],
                int(self.current_sftp_profile['port']),
                self.current_sftp_profile['username'],
                self.current_sftp_profile['password'],
                self.current_sftp_profile['remote_dir']
            )
            
            self.observer = Observer()
            self.observer.schedule(self.event_handler, path=watch_folder, recursive=False)
            self.observer.start()
            
            self.monitoring = True
            self.status_var.set(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {watch_folder}")
            self.btn_start.config(state='disabled')
            self.btn_stop.config(state='normal')
            logger.info(f"üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {watch_folder}")
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: {e}")
    
    def create_control_buttons(self):
        # ‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        self.control_frame = ttk.Frame(self.root)
        self.control_frame.pack(fill="x", padx=10, pady=5, before=self.log_frame)  # ‡∏ß‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á Log

    def setup_button_styles(self):
        style = ttk.Style()
        style.configure('Start.TButton', foreground='green', font=('Tahoma', 10, 'bold'))
        style.configure('Stop.TButton', foreground='red', font=('Tahoma', 10, 'bold'))
            
    def stop_monitoring(self):
        if hasattr(self, 'observer') and self.observer:
            try:
                if hasattr(self.observer, 'is_alive') and self.observer.is_alive():
                    self.observer.stop()
                    self.observer.join()
                    
                self.monitoring = False
                self.status_var.set("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
                self.btn_start.config(state='normal')
                self.btn_stop.config(state='disabled')
                
                logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                
            except Exception as e:
                logger.error(f"‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                                   f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ:\n{str(e)}", 
                                   icon='error')
    
    def setup_monitor_tab(self):
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        frame = ttk.LabelFrame(self.tab_monitor, text="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(frame, text="‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        
        self.watch_folder_var = tk.StringVar(value=WATCH_FOLDER)
        self.entry_watch = ttk.Entry(frame, textvariable=self.watch_folder_var, width=50)
        self.entry_watch.grid(row=0, column=1, padx=5, pady=5)
        
        #============================== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SFTP ======================
        sftp_status_frame = ttk.LabelFrame(self.tab_monitor, text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP")
        sftp_status_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(sftp_status_frame, textvariable=self.sftp_status_var).pack(padx=5, pady=5)

        self.btn_browse = ttk.Button(frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå", command=self.browse_folder)
        self.btn_browse.grid(row=0, column=2, padx=5, pady=5)
        
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_frame = ttk.LabelFrame(self.tab_monitor, text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        status_frame.pack(fill="x", padx=10, pady=5)
        
        self.status_var = tk.StringVar(value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        ttk.Label(status_frame, textvariable=self.status_var).pack(padx=5, pady=5)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
        local_frame = ttk.LabelFrame(self.tab_monitor, text="‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô")
        local_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview
        self.local_tree = ttk.Treeview(local_frame, columns=("name", "size", "modified"), show="headings")
        self.local_tree.heading("name", text="‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")
        self.local_tree.heading("size", text="‡∏Ç‡∏ô‡∏≤‡∏î (KB)")
        self.local_tree.heading("modified", text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        self.local_tree.column("name", width=250)
        self.local_tree.column("size", width=100)
        self.local_tree.column("modified", width=150)
        
        # Scrollbar
        vsb = ttk.Scrollbar(local_frame, orient="vertical", command=self.local_tree.yview)
        hsb = ttk.Scrollbar(local_frame, orient="horizontal", command=self.local_tree.xview)
        self.local_tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        self.local_tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        btn_refresh = ttk.Button(local_frame, text="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä", command=self.refresh_local_files)
        btn_refresh.grid(row=2, column=0, pady=5)
        
    
    
    def setup_download_tab(self):
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        frame = ttk.LabelFrame(self.tab_download, text="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(frame, text="‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        
        self.download_filename_var = tk.StringVar()
        self.entry_download = ttk.Entry(frame, textvariable=self.download_filename_var, width=40)
        self.entry_download.grid(row=0, column=1, padx=5, pady=5)
        
        self.btn_download = ttk.Button(frame, text="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î", command=self.handle_download)
        self.btn_download.grid(row=0, column=2, padx=5, pady=5)
        
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå
        decrypt_frame = ttk.LabelFrame(self.tab_download, text="‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå")
        decrypt_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(decrypt_frame, text="‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        
        self.encrypted_file_var = tk.StringVar()
        self.entry_encrypted = ttk.Entry(decrypt_frame, textvariable=self.encrypted_file_var, width=40)
        self.entry_encrypted.grid(row=0, column=1, padx=5, pady=5)
        
        self.btn_browse_enc = ttk.Button(decrypt_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", command=self.browse_encrypted_file)
        self.btn_browse_enc.grid(row=0, column=2, padx=5, pady=5)
        
        self.btn_decrypt = ttk.Button(decrypt_frame, text="‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™", command=self.handle_decrypt)
        self.btn_decrypt.grid(row=1, column=1, pady=5)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        remote_frame = ttk.LabelFrame(self.tab_download, text="‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP")
        remote_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview
        self.remote_tree = ttk.Treeview(remote_frame, columns=("name", "size", "modified"), show="headings")
        self.remote_tree.heading("name", text="‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")
        self.remote_tree.heading("size", text="‡∏Ç‡∏ô‡∏≤‡∏î (KB)")
        self.remote_tree.heading("modified", text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        self.remote_tree.column("name", width=250)
        self.remote_tree.column("size", width=100)
        self.remote_tree.column("modified", width=150)
        
        # Scrollbar
        vsb = ttk.Scrollbar(remote_frame, orient="vertical", command=self.remote_tree.yview)
        hsb = ttk.Scrollbar(remote_frame, orient="horizontal", command=self.remote_tree.xview)
        self.remote_tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        self.remote_tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        btn_frame = ttk.Frame(remote_frame)
        btn_frame.grid(row=2, column=0, pady=5)
        
        btn_refresh = ttk.Button(btn_frame, text="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä", command=self.refresh_remote_files)
        btn_refresh.pack(side="left", padx=5)
        
        btn_download = ttk.Button(btn_frame, text="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", command=self.download_selected)
        btn_download.pack(side="left", padx=5)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        self.refresh_remote_files()
    
    def setup_log_redirect(self):
        class GuiLogHandler(logging.Handler):
            def __init__(self, text_widget):
                super().__init__()
                self.text_widget = text_widget
            
            def emit(self, record):
                msg = self.format(record)
                self.text_widget.configure(state='normal')
                self.text_widget.insert("end", msg + "\n")
                self.text_widget.configure(state='disabled')
                self.text_widget.see("end")
        
        gui_handler = GuiLogHandler(self.log_text)
        gui_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
        logger.addHandler(gui_handler)
    
    def browse_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.watch_folder_var.set(folder)
            self.refresh_local_files()
    
    def browse_encrypted_file(self):
        file = filedialog.askopenfilename(filetypes=[("Encrypted files", "*.enc")])
        if file:
            self.encrypted_file_var.set(file)
    
    def stop_monitoring(self):
        if self.observer:
            self.observer.stop()
            self.observer.join()
            self.monitoring = False
            self.status_var.set("‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            self.btn_start.config(state='normal')
            self.btn_stop.config(state='disabled')
            logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")
    
    def handle_download(self):
        fname = self.download_filename_var.get().strip()
        if not fname:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
            return
        
        Thread(target=self._download_and_decrypt, args=(fname,)).start()
    
    def _download_and_decrypt(self, fname):
        try:

            if not self.current_sftp_profile:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP ‡∏Å‡πà‡∏≠‡∏ô")
                return None

            result = download_from_sftp(
                filename=fname,
                remote_dir=self.current_sftp_profile['remote_dir'],
                host=self.current_sftp_profile['host'],
                port=self.current_sftp_profile['port'],
                username=self.current_sftp_profile['username'],
                password=self.current_sftp_profile['password']
            )

            #result = download_from_sftp(fname, self.current_sftp_profile['remote_dir'])
            if result:

                key = load_key()
                decrypted = decrypt_file(result, key)
                if decrypted:
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß:\n{os.path.basename(decrypted)}")
                else:
                    messagebox.showerror("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"‚ùå ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n{fname}")
            else:
                messagebox.showerror("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"‚ùå ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {fname}")
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    def handle_decrypt(self):
        filepath = self.encrypted_file_var.get()
        if not filepath:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™")
            return
        
        if not filepath.endswith('.enc'):
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• .enc ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            return
        
        Thread(target=self._decrypt_file, args=(filepath,)).start()
    
    def _decrypt_file(self, filepath):
        try:
            key = load_key()
            decrypted = decrypt_file(filepath, key)
            if decrypted:
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‚úÖ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n{os.path.basename(decrypted)}")
            else:
                messagebox.showerror("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‚ùå ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    def refresh_remote_files(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"""
        for item in self.remote_tree.get_children():
            self.remote_tree.delete(item)

        try:
            host = self.current_sftp_profile['host']
            port = self.current_sftp_profile['port']
            username = self.current_sftp_profile['username']
            password = self.current_sftp_profile['password']
            remote_dir = self.current_sftp_profile['remote_dir']

            transport = paramiko.Transport((host, port))
            transport.connect(username=username, password=password)
            sftp = paramiko.SFTPClient.from_transport(transport)
            
            files = sftp.listdir_attr(remote_dir)
            for file_attr in files:
                if not file_attr.filename.startswith('.'):
                    size = file_attr.st_size / 1024
                    mtime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(file_attr.st_mtime))
                    self.remote_tree.insert("", "end", values=(file_attr.filename, f"{size:.2f}", mtime))
            
            sftp.close()
            transport.close()
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")
    
    def download_selected(self):
        selected_item = self.remote_tree.selection()
        if not selected_item:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
            return
        
        filename = self.remote_tree.item(selected_item)['values'][0]
        self.download_filename_var.set(filename)
        self.handle_download()
    
    def clear_log(self):
        self.log_text.configure(state='normal')
        self.log_text.delete(1.0, "end")
        self.log_text.configure(state='disabled')
    
    def on_closing(self):
        if self.monitoring:
            self.stop_monitoring()
        self.root.destroy()
# ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ FileTransferApp ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ

    def refresh_local_files(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô"""
        watch_folder = self.watch_folder_var.get()
        if not os.path.isdir(watch_folder):
            return
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        for item in self.local_tree.get_children():
            self.local_tree.delete(item)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        for filename in os.listdir(watch_folder):
            filepath = os.path.join(watch_folder, filename)
            if os.path.isfile(filepath):
                size = os.path.getsize(filepath) / 1024  # KB
                mtime = time.strftime('%Y-%m-%d %H:%M:%S', 
                                    time.localtime(os.path.getmtime(filepath)))
                self.local_tree.insert("", "end", values=(filename, f"{size:.2f}", mtime))

    def refresh_remote_files(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP"""
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        for item in self.remote_tree.get_children():
            self.remote_tree.delete(item)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SFTP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        try:
            SFTP_HOST = self.current_sftp_profile['host']
            SFTP_USER = self.current_sftp_profile['username']
            SFTP_PASS = self.current_sftp_profile['password']
            SFTP_PORT = 22
            transport = paramiko.Transport((SFTP_HOST, SFTP_PORT))
            transport.connect(username=SFTP_USER, password=SFTP_PASS)
            sftp = paramiko.SFTPClient.from_transport(transport)
            
            files = sftp.listdir_attr(self.current_sftp_profile['remote_dir'])
            for file_attr in files:
                if not file_attr.filename.startswith('.'):  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö
                    size = file_attr.st_size / 1024  # KB
                    mtime = time.strftime('%Y-%m-%d %H:%M:%S', 
                                        time.localtime(file_attr.st_mtime))
                    self.remote_tree.insert("", "end", 
                                        values=(file_attr.filename, f"{size:.2f}", mtime))
            
            sftp.close()
            transport.close()
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")

    def download_selected(self):
        """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"""
        selected_item = self.remote_tree.selection()
        if not selected_item:
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
            return
        
        filename = self.remote_tree.item(selected_item)['values'][0]
        self.download_filename_var.set(filename)
        self.handle_download()

    def browse_folder(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÑ‡∏ü‡∏•‡πå"""
        folder = filedialog.askdirectory()
        if folder:
            self.watch_folder_var.set(folder)
            self.refresh_local_files()
class SftpProfileManager:
    def __init__(self, config_file="sftp_profiles.json"):
        self.config_file = config_file
        self.profiles = {}
        self.load_profiles()

    def load_profiles(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    self.profiles = json.load(f)
            except Exception as e:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤: {e}")
                self.profiles = {}
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤: {e}")
            self.profiles = {
                "default": {
                    "host": "example.com",
                    "port": 22,
                    "username": "user",
                    "password": "",
                    "remote_dir": "/upload"
                }
            }
            self.save_profiles()

    def save_profiles(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(self.profiles, f, indent=4)
            return True
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤: {e}")
            return False

    def add_profile(self, name, host, port, username, password, remote_dir):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà"""
        if name in self.profiles:
            return False, "‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
        
        self.profiles[name] = {
            "host": host,
            "port": port,
            "username": username,
            "password": password,
            "remote_dir": remote_dir
        }
        self.save_profiles()
        return True, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

    def update_profile(self, name, host, port, username, password, remote_dir):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        if name not in self.profiles:
            return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
        
        self.profiles[name] = {
            "host": host,
            "port": port,
            "username": username,
            "password": password,
            "remote_dir": remote_dir
        }
        self.save_profiles()
        return True, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

    def delete_profile(self, name):
        """‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        if name not in self.profiles:
            return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö"
        
        del self.profiles[name]
        self.save_profiles()
        return True, "‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

    def get_profile(self, name):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        return self.profiles.get(name, None)

    def list_profiles(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        return list(self.profiles.keys())
class SftpProfileWindow(tk.Toplevel):
    def __init__(self, parent, profile_manager, on_profile_selected=None):
        super().__init__(parent)
        self.profile_manager = profile_manager
        self.on_profile_selected = on_profile_selected
        
        self.title("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP")
        self.geometry("600x500")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå
        style = ttk.Style()
        style.configure('Sftp.TFrame', background='#f0f0f0')
        style.configure('Sftp.TLabel', background='#f0f0f0', font=('Tahoma', 10))
        style.configure('Sftp.TButton', font=('Tahoma', 10))
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        self._setup_profile_selection()
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        self._setup_profile_details()
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        self._setup_control_buttons()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°
        self._load_profile_list()
    
    def _setup_profile_selection(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        selection_frame = ttk.LabelFrame(self, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", style='Sftp.TFrame')
        selection_frame.pack(fill="x", padx=10, pady=5)
        
        # Combobox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        ttk.Label(selection_frame, text="‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", style='Sftp.TLabel').pack(side="left", padx=5)
        self.profile_combobox = ttk.Combobox(selection_frame, state="readonly")
        self.profile_combobox.pack(side="left", fill="x", expand=True, padx=5)
        self.profile_combobox.bind("<<ComboboxSelected>>", self._on_profile_selected)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        btn_refresh = ttk.Button(
            selection_frame,
            text="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä",
            command=self._load_profile_list,
            style='Sftp.TButton'
        )
        btn_refresh.pack(side="right", padx=5)
    
    def _setup_profile_details(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        details_frame = ttk.LabelFrame(self, text="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", style='Sftp.TFrame')
        details_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        ttk.Label(details_frame, text="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:", style='Sftp.TLabel').grid(row=0, column=0, padx=5, pady=5, sticky='e')
        self.profile_name = ttk.Entry(details_frame, width=30)
        self.profile_name.grid(row=0, column=1, padx=5, pady=5, sticky='w')
        
        # Host
        ttk.Label(details_frame, text="Host:", style='Sftp.TLabel').grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.host = ttk.Entry(details_frame, width=30)
        self.host.grid(row=1, column=1, padx=5, pady=5, sticky='w')
        
        # Port
        ttk.Label(details_frame, text="Port:", style='Sftp.TLabel').grid(row=2, column=0, padx=5, pady=5, sticky='e')
        self.port = ttk.Entry(details_frame, width=10)
        self.port.grid(row=2, column=1, padx=5, pady=5, sticky='w')
        
        # Username
        ttk.Label(details_frame, text="Username:", style='Sftp.TLabel').grid(row=3, column=0, padx=5, pady=5, sticky='e')
        self.username = ttk.Entry(details_frame, width=30)
        self.username.grid(row=3, column=1, padx=5, pady=5, sticky='w')
        
        # Password
        ttk.Label(details_frame, text="Password:", style='Sftp.TLabel').grid(row=4, column=0, padx=5, pady=5, sticky='e')
        self.password = ttk.Entry(details_frame, width=30, show="*")
        self.password.grid(row=4, column=1, padx=5, pady=5, sticky='w')
        
        # Remote Directory
        ttk.Label(details_frame, text="‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á:", style='Sftp.TLabel').grid(row=5, column=0, padx=5, pady=5, sticky='e')
        self.remote_dir = ttk.Entry(details_frame, width=30)
        self.remote_dir.grid(row=5, column=1, padx=5, pady=5, sticky='w')
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        btn_test = ttk.Button(
            details_frame,
            text="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
            command=self._test_connection,
            style='Sftp.TButton'
        )
        btn_test.grid(row=6, column=1, pady=10, sticky='e')
    
    def _setup_control_buttons(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°"""
        button_frame = ttk.Frame(self)
        button_frame.pack(fill="x", padx=10, pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        self.btn_select = ttk.Button(
            button_frame,
            text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
            command=self._select_current_profile,
            style='Sftp.TButton',
            state='disabled'
        )
        self.btn_select.pack(side="right", padx=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
        btn_add = ttk.Button(
            button_frame,
            text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
            command=self._add_profile,
            style='Sftp.TButton'
        )
        btn_add.pack(side="left", padx=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        self.btn_update = ttk.Button(
            button_frame,
            text="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï",
            command=self._update_profile,
            style='Sftp.TButton',
            state='disabled'
        )
        self.btn_update.pack(side="left", padx=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
        self.btn_delete = ttk.Button(
            button_frame,
            text="‡∏•‡∏ö",
            command=self._delete_profile,
            style='Sftp.TButton',
            state='disabled'
        )
        self.btn_delete.pack(side="left", padx=5)
    
    def _load_profile_list(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô Combobox"""
        profiles = self.profile_manager.list_profiles()
        self.profile_combobox['values'] = profiles
        if profiles:
            self.profile_combobox.current(0)
            self._on_profile_selected()
    
    def _on_profile_selected(self, event=None):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Combobox"""
        selected = self.profile_combobox.get()
        if not selected:
            return
        
        profile = self.profile_manager.get_profile(selected)
        if profile:
            self.profile_name.delete(0, tk.END)
            self.profile_name.insert(0, selected)
            
            self.host.delete(0, tk.END)
            self.host.insert(0, profile.get('host', ''))
            
            self.port.delete(0, tk.END)
            self.port.insert(0, str(profile.get('port', 22)))
            
            self.username.delete(0, tk.END)
            self.username.insert(0, profile.get('username', ''))
            
            self.password.delete(0, tk.END)
            self.password.insert(0, profile.get('password', ''))
            
            self.remote_dir.delete(0, tk.END)
            self.remote_dir.insert(0, profile.get('remote_dir', '/'))
            
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
            self.btn_select.config(state='normal')
            self.btn_update.config(state='normal')
            self.btn_delete.config(state='normal')
    
    def _add_profile(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        name = self.profile_name.get().strip()
        host = self.host.get().strip()
        port = self.port.get().strip()
        username = self.username.get().strip()
        password = self.password.get()
        remote_dir = self.remote_dir.get().strip()
        
        if not all([name, host, port, username, remote_dir]):
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return
        
        try:
            port = int(port)
        except ValueError:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "Port ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            return
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        success, msg = self.profile_manager.add_profile(
            name, host, port, username, password, remote_dir
        )
        
        if success:
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", msg)
            self._load_profile_list()
        else:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", msg)
    
    def _update_profile(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        name = self.profile_name.get().strip()
        host = self.host.get().strip()
        port = self.port.get().strip()
        username = self.username.get().strip()
        password = self.password.get()
        remote_dir = self.remote_dir.get().strip()
        
        if not all([name, host, port, username, remote_dir]):
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return
        
        try:
            port = int(port)
        except ValueError:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "Port ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            return
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        success, msg = self.profile_manager.update_profile(
            name, host, port, username, password, remote_dir
        )
        
        if success:
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", msg)
            self._load_profile_list()
        else:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", msg)
    
    def _delete_profile(self):
        """‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        name = self.profile_name.get().strip()
        if not name:
            return
        
        if not messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", f"‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå '{name}' ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
            return
        
        success, msg = self.profile_manager.delete_profile(name)
        if success:
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", msg)
            self._clear_fields()
            self._load_profile_list()
        else:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", msg)
    
    def _clear_fields(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.profile_name.delete(0, tk.END)
        self.host.delete(0, tk.END)
        self.port.delete(0, tk.END)
        self.username.delete(0, tk.END)
        self.password.delete(0, tk.END)
        self.remote_dir.delete(0, tk.END)
        
        # ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.btn_select.config(state='disabled')
        self.btn_update.config(state='disabled')
        self.btn_delete.config(state='disabled')
    
    def _test_connection(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SFTP"""
        host = self.host.get().strip()
        port = self.port.get().strip()
        username = self.username.get().strip()
        password = self.password.get()
        
        if not all([host, port, username]):
            messagebox.showwarning("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Host, Port ‡πÅ‡∏•‡∏∞ Username")
            return
        
        try:
            port = int(port)
        except ValueError:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "Port ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            return
        
        try:
            import paramiko
            transport = paramiko.Transport((host, port))
            transport.connect(username=username, password=password)
            
            sftp = paramiko.SFTPClient.from_transport(transport)
            sftp.close()
            transport.close()
            
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå SFTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n{str(e)}")
    
    def _select_current_profile(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        if self.on_profile_selected:
            profile_name = self.profile_name.get().strip()
            profile = self.profile_manager.get_profile(profile_name)
            if profile:
                self.on_profile_selected(profile)
                self.destroy()
# ======== Start main application =========
if __name__ == "__main__":
    root = tk.Tk()
    app = FileTransferApp(root)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    root.mainloop()